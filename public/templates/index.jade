doctype html
html(lang='en')

  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='css, html, code guide, style guide, front-end')
    meta(name='author', content='&yet')

    title &yet's team guide to writing sane and maintainable front-end

    link(rel='icon', type='image/png', href='/public/img/favicon.png')

    link(rel='stylesheet', href='//cloud.typography.com/7773252/674524/css/fonts.css')
    link(rel='stylesheet', href='public/css/main.min.css')

    script.
      !function(g,s,q,r,d){r=g[r]=g[r]||function(){(r.q=r.q||[]).push(
      arguments)};d=s.createElement(q);q=s.getElementsByTagName(q)[0];
      d.src='//d1l6p2sc9645hc.cloudfront.net/tracker.js';q.parentNode.
      insertBefore(d,q)}(window,document,'script','_gs');

      _gs('GSN-250938-Z');

  body
    header(role='banner')
      .container
        .cf
          a.button.pull-right(href='https://github.com/andyet/yeti-guide', title='See on Github') See on Github
        h1 &yet's Code Guide
        p Standards for writing sane and maintainable front-end systems

  .container

    section.toc
      h2 Introduction
      p This guide has been written with the purpose of empowering members of <a href='http://andyet.com/team'>&yet</a> to write better front-end systems in <a href='http://jade-lang.com/'>Jade</a> and <a href='http://learnboost.github.io/stylus/'>Stylus</a>. It follows standard CSS conventions but also introduces preferential choices of our team. Feel free to treat it as an inspiration for writing your own code guides.

      h2 Table of Contents
      .grid-flex-container

        .grid-flex-cell
          h3 HTML
          nav(role='navigation')
            ul
              li: a(href='#html-syntax') Syntax
              li: a(href='#encoding') Encoding
              li: a(href='#attributes') Attributes
              li: a(href='#tag-nesting') Tag Nesting
              li: a(href='#class-chaining') Class Chaining
              li: a(href='#semantics-and-accessibility') Semantics and Accessibility
              li: a(href='#boilerplate') HTML Boilerplate

        .grid-flex-cell
          h3 CSS
          nav(role='navigation')
            ul
              li: a(href='#css-syntax') Syntax
              li: a(href='#preprocessing') Preprocessing
              li: a(href='#declaration-order') Declaration Order
              li: a(href='#units-and-colors') Units and Colors
              li: a(href='#comments') Comments
              li: a(href='#specificity') Specificity
              li: a(href='#class-naming') Class Naming
              li: a(href='#media-queries') Media Queries
              li: a(href='#modularisation') Modularisation

    section#html-syntax
      h2 HTML
      h3 Syntax
      .grid-flex-container

        .grid-flex-cell
          ul
            li Use two spaces for indentation (here's how to set it up in <a href='http://www.sublimetext.com/docs/2/indentation.html'>Sublime Text</a>, <a href='http://manual.macromates.com/en/working_with_text'>Textmate</a> or <a href='http://www.emacswiki.org/emacs/NoTabs'>Emacs</a>). Nested elements should be indented once. 
            li Use single quotation marks for attributes.
            li Feel free to omit <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission'>optional tags</a> but mind the code's readability.
            li Add empty lines between major elements to improve readability (use your own judgement).

        .grid-flex-cell

          :markdown
            ```jade
            doctype html
            html(lang='en')

              head
                meta(charset='utf-8')
                meta(name='viewport', content='width=device-width, initial-scale=1')

                link(rel='stylesheet', href='css/main.min.css')
            ```

    section#encoding
      h3 Encoding
      .grid-flex-container

        .grid-flex-cell
          p Use <code>UTF-8</code> encoding and custom characters instead of HTML entities. To access the list of characters hit <code>⌘+⌃+Space</code> (Command + Control + Space). This method of invoking special characters list might not work in certain apps like Sublime Text, but will work in Chrome or IM.

        .grid-flex-cell

          :markdown
            ```html
             head
                meta(charset='utf-8')
                title from &yet ❤︎
            ```

    section#attributes
      h3 Attributes
      .grid-flex-container

        .grid-flex-cell
          ul
            li Omit <code>type</code> attributes in CSS and Javascript.
            li Omit values in <a href='http://www.whatwg.org/specs/web-apps/current-work/multipage/infrastructure.html#boolean-attributes'>boolean attributes</a>.
            li Comply to the following attribute order: <code>class</code>, <code>id</code>, <code>data-*</code>, <code>src</code>, <code>href</code>, <code>type</code>, <code>title</code>, <code>alt</code> and <code>role</code>.
        .grid-flex-cell

          :markdown
            ```html
            link(rel='stylesheet', href='css/main.min.css')
            input.form-input(type='text', required)
            a.button(href='/', title='A buttton')
            ```

    section#tag-nesting
      h3 Tag Nesting

      .grid-flex-container

        .grid-flex-cell
          p Complying with Jade syntax in some cases means extensive use of <a href='http://jade-lang.com/reference/plain-text/'>piping</a> to separate plain text from nested tags (like <code>em</code> or <code>strong</code>).
          p To avoid unreadable and cumbersome markup use regular HTML tags.
          p For regular nesting scenarios use indentation or <a href='http://jade-lang.com/reference/tags/'>block expansion</a>.

        .grid-flex-cell

          :markdown
            ```html
            // Regular nesting
            ul 
              li
                a(href='#') Link
              li: a(href='#') Link

            // Correct
            p A paragraph with <strong>emphasized text.</strong>

            // Incorrect
            p 
              | A paragraph with 
              strong emphasized text.
            ```

    section#class-chaining
      h3 Class Chaining

      .grid-flex-container

        .grid-flex-cell
          p Chain classes directly after the element.

        .grid-flex-cell

          :markdown
            ```html
            a.list-item.active(href='')
            ```

    section#semantics-and-accessibility
      h3 Semantics and Accessibility

      .grid-flex-container
        .grid-flex-cell
          p For structuring content make use of new HTML5 <a href='http://blog.teamtreehouse.com/use-html5-sectioning-elements'>sectioning elements</a>.

          p Add basic <a href='http://alistapart.com/article/aria-and-progressive-enhancement/'>ARIA landmark roles</a> that increase accessibility by assigning meaning to specific areas of the page. Here's <a href='http://www.paciellogroup.com/blog/2013/02/using-wai-aria-landmarks-2013/'>a good rundown of roles</a> by Steve Faulkner. 
        .grid-flex-cell

          :markdown
            ```html
              header(role='banner')
                h1 This is a website
              main(role='main')
                p Main content of my site
              footer(role='contentinfo')
                p © 2015
            ```

    section#boilerplate
      h3 Boilerplate
      p Feel free to use a bare-minimum and standard-compliant boilerplate as a starting point for templating—<a href='https://github.com/thefoxis/html-boilerplate/'>see on Github</a>.

    section#css-syntax
      h2 CSS
      h3 Syntax

      .grid-flex-container
        .grid-flex-cell
          ul
            li Use two spaces for indentation, as in Jade.
            li Use colons after properties (despite Stylus allowing their omittance).
            li Use a space to separate the colon from the property value.
            li Fine tune your CSS vocabulary <a href='http://apps.workflower.fi/vocabs/css/en'>here</a>.

        .grid-flex-cell

          :markdown
            ```html
              .selector
                property: value
            ```

    section#preprocessing
      h3 Preprocessing
      p We are using Stylus as a preprocessor of choice. <a href='http://learnboost.github.io/stylus/'>Go here for documentation</a>.

      ul
        li Store repeatable values in variables.
        li Do not nest further than 3 levels deep.
        li Be cautious of code repetitiveness when using <code>@extend</code> (consider using <code>%placeholder</code> where relevant). Read more about the extend concept <a href='http://css-tricks.com/the-extend-concept/'>here</a>.
        li Use mixins and functions where necessary but don't overengineer it.

    section#declaration-order
      h3 Declaration Order

      .grid-flex-container
        .grid-flex-cell
          p Put declarations in the following order:

          ol
            li Display and box model
            li Positioning
            li Typography
            li Color
            li Other

          p See more examples on <a href='http://css-tricks.com/poll-results-how-do-you-order-your-css-properties/'>CSS Tricks</a>.

        .grid-flex-cell

          :markdown
            ```css
              .selector
                display: block
                width: 100px
                height: 100px
                position: absolute
                top: 0
                left: 0
                font-family: sans-serif
                line-height: 1.5
                background: black
                cursor: pointer
            ```

    section#units-and-colors
      h3 Units and Colors

      .grid-flex-container
        .grid-flex-cell

          ul
            li Omit units after “0”.
            li Omit leading “0”s in values (example: .5em not 0.5em).
            li Use <a href='http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/'>unitless line heights</a>.
            li Use pixels for element sizing.
            li Use pixels for font sizes.

        .grid-flex-cell

          ul
            li To create different hues (shades) of one colour create a variable and use <a href='http://learnboost.github.io/stylus/docs/operators.html#color-operations'>color operations</a> such as <code>darken()</code> and <code>lighten()</code>.
            li Defer to hex/RGBA for one-time colors (if their usage is necessary).
            li In case of hex use 3 character hexadecimal notation wherever possible (<code>#fff</code> not <code>#ffffff</code>).

    section#comments
      h3 Comments

      .grid-flex-container
        .grid-flex-cell
          ul
            li Include sectioning comments at the beginning of the file and anywhere else inside it if necessary.
            li Prefix the section names with <code>$</code> for better searchability.
            li For inline, local commenting use <code>//</code>

        .grid-flex-cell
          :markdown
            ```css
            /*---------------------------------------------
            * $BUTTONS
            ---------------------------------------------*/

            // Comment
            ```

    section#specificity
      h3 Specificity

      p Specificity determines which CSS rule is applied by the browsers to a given element.
      ul
        li Use the least number of selectors required to style an element.
        li Usage of classes is strongly recommended (unless there's a very good reason to use an id).
        li Avoid using classes with type selectors (not <code>ul.item-list</code> but <code>.item-list</code>).

    section(id='class-naming')
      h3 Class Naming

      ul
        li Use hyphens, not underscores or camelCase.
        li If you are manipulating HTML elements with JavaScript, use either <code>data-*</code> attributes or <code>js-*</code> prefixed classes (e.g. <code>js-draggable</code>). Those classes are JavaScript specific, and shouldn't be used in stylesheets as a point of reference for styling. This separates the presentation layer and helps to avoid unnecessary confusion and errors in code execution if a class is accidentaly removed.
        li Follow the rules of semantics—make classes descriptive and not reliable on appearance of the given element.

      h5 More resources on class naming can be found here:
      ul
        li: a(href='http://css-tricks.com/semantic-class-names/') What Makes a Semantic Class Name
        li: a(href='http://csswizardry.com/2010/08/semantics-and-sensibility/') Semantics and Sensibility
        li: a(href='http://www.smashingmagazine.com/2013/08/20/semantic-css-with-intelligent-selectors/') Semantic CSS With Intelligent Selectors

    section#media-queries
      h3 Media Queries

      p Put media queries at the end of the file, where the modified element was defined. Make sure styles affecting desktop resolutions are inside a media query as well, the only styles placed outside should be shared by all resolutions.

    section#modularisation
      h3 Modularisation

      p 

      :markdown
        ```
        └── styl
            ├── globals
            |   ├── _colors.styl
            |   └── _variables.styl
            ├── libraries
            ├── components
            └── templates
                ├── globals
                └── index.styl
        ```

    section
      h3 Acknowledgements
      p This guide is a result of years of learning how to write good front-end. It wouldn't be possible without people who dedicated a great amount of time and poured their hearts into spreading the knowledge. Thank you.

      h4 Further materials
      ul
        li: a(href='https://github.com/necolas/idiomatic-css') Idiomatic CSS by Nicolas Gallagher
        li: a(href='http://cssguidelin.es/') CSS Guidelines by Harry Roberts
        li: a(href='http://nicolasgallagher.com/about-html-semantics-front-end-architecture/') About HTML semantics and front-end architecture by Nicolas Gallagher
        li: a(href='http://csswizardry.com/2012/04/the-single-responsibility-principle-applied-to-css/') The single responsibility principle applied to CSS by Harry Roberts
        li: a(href='http://codeguide.co/') Code Guide by Mark Otto

   footer(role='contentinfo')
      .container
        
        nav(role='navigation')
          ul.list-unstyled.list-inline
            li: a(href='https://github.com/andyet/yeti-guide') Github
            li: a(href='https://github.com/andyet/yeti-guide/releases') Releases
            li: a(href='https://github.com/andyet/yeti-guide/blob/gh-pages/CONTRIBUTING.md') Contributing

        p Designed and built by <a href='https://twitter.com/fox'>@fox</a>.
        p Maintained with invaluable help of <a href='https://github.com/andyet/yeti-guide/graphs/contributors'>contributors</a>.

        a(href='http://andyet.com/', class='logo')